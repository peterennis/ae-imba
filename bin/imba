#!/usr/bin/env node

var path = require('path')
var fs = require('fs');
var compiler = require("../dist/compiler");

var helpers = compiler.helpers;
var package = require('../package.json');

var parseOpts = {
	alias: {h: 'help',v: 'version',e: 'eval'},
	schema: {eval: {type: 'string'}}
};

var help = "\nUsage: imba [options] [ -e script | script.imba ] [arguments]\n\n  -e, --eval script      evaluate script\n      --es5              evaluate without native let/var/await\n  -h, --help             display this help message\n  -v, --version          display the version number\n";
var self = {};

function lookup(src){
	src = path.resolve(process.cwd(),src);
	
	if (fs.statSync(src).isDirectory()) {
		var f = path.join(src,'index.imba');
		if (fs.existsSync(f)) {
			src = f;
		} else {
			return;
		};
	};
	
	return src;
};

function run(code,pars) {
	if(!pars||pars.constructor !== Object) pars = {};
	var filename = pars.filename !== undefined ? pars.filename : null;
	var main = require.main;
	main.filename = process.argv[1] = (filename ? fs.realpathSync(filename) : '.');
	main.moduleCache && (main.moduleCache = {});
	
	var Module = require('module').Module;
	main.paths = Module._nodeModulePaths(path.dirname(filename));
	
	if (path.extname(main.filename) != '.imba' || require.extensions) {
		arguments[1].target || (arguments[1].target = 'node');
		// arguments[1].standalone || (arguments[1].standalone = true);
		var content = compiler.compile(code,arguments[1]);
		return main._compile((content.js || content),main.filename);
	} else {
		return main._compile(code,main.filename);
	};
};


// TODO add support for imba run cache?
if (require.extensions) {
	require.extensions['.imba'] = function(mod,filename) {
		var options = {filename: filename,target: 'node',format: 'cjs'};
		
		var body = fs.readFileSync(filename,'utf8');
		var content = compiler.compile(body,options);
		return mod._compile((content.js),filename);
	};
};

function main(){
	var args = process.argv;
	var o = helpers.parseArgs(args.slice(2),parseOpts);
	var src = o.main;
	if (src instanceof Array) { src = src[0] };
	
	process.argv.shift();
	process.argv[0] = 'imba';
	
	if (o.version) {
		return console.log(package.version);
	} else if ((!o.main && !o.eval) || o.help) {
		return console.log(help);
	};
	
	if (o.es6) {
		process.env.IMBA_ES6 = true;
	};
	
	if (o.es5) {
		process.env.IMBA_ES5 = true;
	};
	
	if (o.eval) {
		o.target = 'node';
		return imbac.run(o.eval,o);
	};
	
	src = lookup(src);
	src = path.resolve(process.cwd(),src);
	var body = fs.readFileSync(src,'utf8');
	o.target = 'node';
	o.sourcePath = o.filename = src;
	return run(body,o);
};

main();